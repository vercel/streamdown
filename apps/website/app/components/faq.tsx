'use client';

import { CodeBlock } from '@/components/code-block';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';

const faqs = [
  {
    id: 'streamdown-difference',
    question: 'What makes Streamdown different from react-markdown?',
    answer:
      "Streamdown is specifically designed for AI-powered streaming applications. It includes built-in support for incomplete markdown parsing, which means it can render markdown even while it's being generated by AI models. It also includes security features like URL prefix restrictions and better performance optimizations for streaming contexts.",
  },
  {
    id: 'custom-components',
    question: 'Can I use custom components with Streamdown?',
    answer:
      'Yes! Streamdown fully supports custom components through the `components` prop, just like react-markdown. You can override any markdown element with your own React components to customize the rendering.',
  },
  {
    id: 'incomplete-parsing',
    question: 'How does the incomplete markdown parsing work?',
    answer:
      'When `parseIncompleteMarkdown` is enabled (default), Streamdown automatically detects and fixes common issues in incomplete markdown like unclosed code blocks, incomplete lists, and partial formatting. This ensures smooth rendering even as markdown is being streamed from AI models.',
  },
  {
    id: 'plugin-compatibility',
    question: 'Is Streamdown compatible with all react-markdown plugins?',
    answer:
      'Streamdown supports both remark and rehype plugins, making it compatible with most react-markdown plugins. It includes popular plugins like remarkGfm, remarkMath, and rehypeKatex by default, and you can add your own through the `remarkPlugins` and `rehypePlugins` props.',
  },
  {
    id: 'shiki-warning',
    question: (
      <span>
        Why do I get a{' '}
        <code className="rounded-md bg-foreground/5 px-2 py-1 font-mono text-sm tracking-tight">
          Package shiki can't be external
        </code>{' '}
        warning?
      </span>
    ),
    answer: (
      <div>
        <p>
          This warning occurs when Next.js tries to treat Shiki as an external
          package. To fix this, you need to install Shiki explicitly with{' '}
          <code className="rounded-md bg-foreground/5 px-2 py-1 font-mono text-sm tracking-tight">
            npm install shiki
          </code>{' '}
          and add it to your{' '}
          <code className="rounded-md bg-foreground/5 px-2 py-1 font-mono text-sm tracking-tight">
            transpilePackages
          </code>{' '}
          array in your{' '}
          <code className="rounded-md bg-foreground/5 px-2 py-1 font-mono text-sm tracking-tight">
            next.config.ts
          </code>
          :
        </p>
        <div className="my-2">
          <CodeBlock
            className="my-4 rounded-md border p-4"
            code={`{
  // ... other config
  transpilePackages: ["shiki"],
}`}
            language="tsx"
          />
        </div>
        <p>This ensures Shiki is properly bundled with your application.</p>
      </div>
    ),
  },
  {
    id: 'tailwind-config',
    question: 'How do I configure Tailwind CSS to work with Streamdown?',
    answer: (
      <>
        <div>
          <p>
            For <span className="font-medium">Tailwind v4</span>, add a{' '}
            <code className="rounded-md bg-foreground/5 px-2 py-1 font-mono text-sm tracking-tight">
              @source
            </code>{' '}
            directive to your{' '}
            <code className="rounded-md bg-foreground/5 px-2 py-1 font-mono text-sm tracking-tight">
              globals.css
            </code>{' '}
            file with the path to Streamdown's distribution files:
          </p>
          <div className="my-2">
            <CodeBlock
              className="my-4 rounded-md border p-4"
              code={`@source "../node_modules/streamdown/dist/index.js";`}
              language="css"
            />
          </div>
        </div>
        <div>
          <p>
            For <span className="font-medium">Tailwind v3</span>, add Streamdown
            to your{' '}
            <code className="rounded-md bg-foreground/5 px-2 py-1 font-mono text-sm tracking-tight">
              content
            </code>{' '}
            array in{' '}
            <code className="rounded-md bg-foreground/5 px-2 py-1 font-mono text-sm tracking-tight">
              tailwind.config.js
            </code>
            :
          </p>
          <div className="my-2">
            <CodeBlock
              className="my-4 rounded-md border p-4"
              code={`content: [
  // ... your other content paths
  "./node_modules/streamdown/dist/**/*.js",
]`}
              language="js"
            />
          </div>
        </div>
        <p>
          Adjust the paths based on your project structure. This ensures
          Tailwind scans Streamdown's files for any utility classes used in the
          component.
        </p>
      </>
    ),
  },
];

export const FAQ = () => (
  <div className="divide-y sm:grid sm:grid-cols-3 sm:divide-x sm:divide-y-0">
    <div className="space-y-2 p-4 sm:p-8">
      <h2 className="font-semibold text-2xl tracking-tight">FAQ</h2>
      <p className="text-muted-foreground">
        Common questions about Streamdown and how it works with AI-powered
        streaming applications.
      </p>
    </div>
    <div className="sm:col-span-2">
      <Accordion className="w-full" collapsible type="single">
        {faqs.map((faq) => (
          <AccordionItem key={faq.id} value={faq.id}>
            <AccordionTrigger className="p-4 text-left text-base sm:p-8">
              {faq.question}
            </AccordionTrigger>
            <AccordionContent className="p-4 pt-0 text-base leading-relaxed sm:p-8 sm:pt-0">
              {faq.answer}
            </AccordionContent>
          </AccordionItem>
        ))}
      </Accordion>
    </div>
  </div>
);
